#!/bin/bash
#!/ <-- This simbole will be remove with same-line via build.sh. this is just for TDD
source ../conf/zinst.conf 		#!/ Test load
BoxPkg=$ZPackages
BoxPkgArry=( $BoxPkg )

CurrPkgList="$ZinstBaseRoot/vault/Source/.current_package.list"

StockPkg="/tmp/stockpkg"
touch $StockPkg

### Package list up
zinst find  > $CurrPkgList
sudo mkdir -p $CurrPkgDiR
	### Loop for each package sort
	BoxCounter=0
	while [ $BoxCounter -lt ${#BoxPkgArry[@]} ]
	do
		Package_Parse_Check ${BoxPkgArry[$BoxCounter]}
		BoxPkgArry[$BoxCounter]=$Parse_Result
		PrintCheck $Parse_Result
		#### Start here for fetch the information
		### Dependency check by zicf file from distribution server
			IndexFileChk=`ls $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> $zinst_log`
			if [[ $IndexFileChk = "" ]]
			then
				$sudo_base bash -c "curl -sL \"$Dist_URL/checker/${BoxPkgArry[$BoxCounter]}.zicf\" -o $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> $zinst_log "
				CheckDep=(`cat $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> $zinst_log |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
			else
				CheckDep=(`cat $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> $zinst_log |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
			fi
		

		### Check existed dependency package 
		if [[ ${CheckDep[@]} != ""  ]]
		then
			### Loop for requires package check
			SubBoxCounter=0
			while [ $SubBoxCounter -lt ${#CheckDep[@]} ]
			do
				### version check & define
				SubCt=0
				while [ $SubCt -lt ${#BoxPkgArry[@]} ]
				do
					## check verion in line
					Package_Parse_Check ${BoxPkgArry[$SubCt]}
					BoxPkgArry[$SubCt]=$Parse_Result
					PrintCheck $Parse_Result
				let SubCt=$SubCt+1
				done

				### Package Parse check such as a version 
				Package_Parse_Check ${CheckDep[$SubBoxCounter]}
				CheckDep[$SubBoxCounter]=$Parse_Result
				PrintCheck $Parse_Result
	
				## Check Existed package in line
				CheckBoxPkg=`echo "${BoxPkgArry[@]}" | grep "${CheckDep[$SubBoxCounter]}" `

				## Check Existed package in local
				CurrCheckBoxPkg=`zinst ls |grep -w \`echo "${CheckDep[$SubBoxCounter]}" | awk -F'-' '{print $1}'\``
				SubFetchFile=`echo "${CheckDep[$SubBoxCounter]}"`

					SubIndexFileChk=`ls $CurrPkgDiR/$SubFetchFile.zicf 2> $zinst_log`
					if [[ $SubIndexFileChk = "" ]]
					then
						$sudo_base bash -c "curl -sL \"$Dist_URL/checker/$SubFetchFile.zicf\" -o $CurrPkgDiR/$SubFetchFile.zicf 2> $zinst_log "
						SudDepChk=(`cat $CurrPkgDiR/$SubFetchFile.zicf 2> $zinst_log |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
					else
						SudDepChk=(`cat $CurrPkgDiR/$SubFetchFile.zicf 2> $zinst_log |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
					fi
		
				### Package version check & define
				SubCLe=0
				while [ $SubCLe -lt ${#SudDepChk[@]} ]
				do
					if [[ ${SudDepChk[$SubCLe]} != "" ]]
					then
						CurrSubSecPkgChk=`zinst ls -w |grep "${SudDepChk[$SubCLe]}" | awk '{print $4}' `
						SubSecPkgChk=`echo "${BoxPkgArry[@]}" | grep "${SudDepChk[$SubCLe]}"`
						if [[ $CurrSubSecPkgChk = "" ]]
						then
							if [[ $SubSecPkgChk = "" ]]
							then
								echo " $Barr"
								echo "  Notice: Package requires as below"
								echo "   ${SudDepChk[$SubCLe]}" 
								echo " $Barr"
								echo ""
								exit 0;
							fi
						fi
					fi
				let SubCLe=$SubCLe+1
				done

				### Switch array
				if [[ $SubBoxCounter = 0 ]]
				then
					if [[ $CurrCheckBoxPkg = "" ]]
					then
						if [[ $CheckBoxPkg != "" ]]
						then
						### Check in-line package include
						ChkinArry=`echo "$CheckBoxPkg" |grep -w "${CheckDep[$SubBoxCounter]}"`
							if [[ $ChkinArry != "" ]]; then
								echo "${CheckDep[$SubBoxCounter]} ${BoxPkgArry[$BoxCounter]}" >> $StockPkg

							else
							### Require package check in local
							CurrSubSecPkgChk=`zinst ls -w |grep "${CheckDep[$SubBoxCounter]}" | awk '{print $4}' `
								if [[ $CurrSubSecPkgChk = "" ]];then
									echo "$Barr"
									echo "  Notice: Package requires as below !!!!"
									echo "   ${CheckDep[$SubBoxCounter]}"
									echo "$Barr"
									echo ""
									exit 0;
								else
									echo "${BoxPkgArry[$BoxCounter]} tmp_beacon" >> $StockPkg
								fi
							fi
						else
							echo "$Barr"
							echo "  Notice: Package requires as below"
							echo "   ${CheckDep[$SubBoxCounter]}"
							echo "$Barr"
							echo ""
							exit 0;
						fi
					else
						ChkinArry=`echo " $CheckBoxPkg" |grep " ${CheckDep[$SubBoxCounter]}"`
							if [[ $ChkinArry != "" ]]; then
								echo "${CheckDep[$SubBoxCounter]} ${BoxPkgArry[$BoxCounter]}" >> $StockPkg
							else
							CurrSubSecPkgChk=`zinst ls |grep -w "${SudDepChk[$SubCLe]}" | awk '{print $4}' `
								if [[ $CurrSubSecPkgChk = "" ]];then
									echo "$Barr"
									echo "  Notice: Package requires as below"
									echo "   ${CheckDep[$SubBoxCounter]}"
									echo "$Barr"
									echo ""
									exit 0;
								else
									echo "${BoxPkgArry[$BoxCounter]} tmp_beacon" >> $StockPkg
								fi
							fi
					fi
				else
					### Not depens on the package
					if [[ $CurrCheckBoxPkg = "" ]]
					then
						if [[ $CheckBoxPkg != "" ]]
						then
							echo "${CheckDep[$SubBoxCounter]} ${BoxPkgArry[$BoxCounter]}" >> $StockPkg
						else
								echo "$Barr"
								echo "  Notice: Package requires as below" 
								echo "   ${CheckDep[$SubBoxCounter]}"
								echo "$Barr"
								echo ""
								exit 0;
						fi
					fi
				fi
				let SubBoxCounter=$SubBoxCounter+1
			done
		else
			Package_Parse_Check ${BoxPkgArry[$BoxCounter]}
			BoxPkgArry[$BoxCounter]=$Parse_Result
			PrintCheck $Parse_Result
			echo "${BoxPkgArry[$BoxCounter]} tmp_beacon" >> $StockPkg
		fi
	let BoxCounter=$BoxCounter+1
	done

BoxPkgArry=( `tsort $StockPkg | sed -e '/tmp_beacon/d'`)

### Remove temporary file
rm -f $CurrPkgList $CurrPkgDiR 2> $zinst_log
rm -f $StockPkg

AllPkgSortedResult="${BoxPkgArry[@]}"
